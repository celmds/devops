version: "3.9"

services:
  database:
  # build an image from the Dockerfile in the init-db directory
    build:
      context: ./init-db
    container_name: postgres #container name
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # database name
      POSTGRES_USER: ${POSTGRES_USER} # user name
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # password
    volumes:
      - pgdata:/var/lib/postgresql/data # mount the volume to persist data
    networks:
      - app-network # network name
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U usr -d db"] # check if the database is ready (cmd shell to comppute, pg_isready is to check if it is ready)
      interval: 5s # check every 5 seconds
      timeout: 5s # timeout after 5 seconds 
      retries: 5 # and here retry 5 times
    



  backend:
  # build an image from the Dockerfile in the backend directory
    build:
      context: ./backend 
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network # network name

    depends_on:
      - database # wait for the database to be ready
    restart: unless-stopped # restart the container unless stopped

  api:
    build:
    # build an image from the Dockerfile in the simpleapi directory
      context: ./simpleapi 
    container_name: backend-api  # container name
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network # network name
      - backend-network # network name for backend
    depends_on:
      database:
        condition: service_healthy # wait for the database to be healthy
    restart: unless-stopped # restart the container unless stopped

  httpd:
    build:
      context: ./HTTP-server # build an image from the Dockerfile in the HTTP-server directory
      dockerfile: Dockerfile
    container_name: apache-proxy
    ports:
      - "${HTTP_PORT}:80" # map the host port to the container port
    networks:
      - backend-network # network name for backend
    depends_on: 
      - backend
      - api 

networks: # define the networks
  app-network:
    driver: bridge
  backend-network:
    driver: bridge
  

volumes: # define the volumes
  pgdata: